

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "WSI.DBCredit.Data\App.config"
//     Connection String Name: "DnBRepositoryContext"
//     Connection String:      "Data Source=TOANSQL01.nbfc.com;Database=EnterpriseSharedData;User ID=nbfc\\svc_d_devops_esb;password=**zapped**;;Integrated Security=True;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace WSI.DnBCredit.Data
{
    using System.Linq;

    #region Unit of work

    public interface IDnBRepositoryContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Party> Parties { get; set; } // PARTY
        System.Data.Entity.DbSet<PartyCreditScore> PartyCreditScores { get; set; } // PARTY_CREDIT_SCORE

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class DnBRepositoryContext : System.Data.Entity.DbContext, IDnBRepositoryContext
    {
        public System.Data.Entity.DbSet<Party> Parties { get; set; } // PARTY
        public System.Data.Entity.DbSet<PartyCreditScore> PartyCreditScores { get; set; } // PARTY_CREDIT_SCORE

        static DnBRepositoryContext()
        {
            System.Data.Entity.Database.SetInitializer<DnBRepositoryContext>(null);
        }

        public DnBRepositoryContext()
            : base("Name=DnBRepositoryContext")
        {
        }

        public DnBRepositoryContext(string connectionString)
            : base(connectionString)
        {
        }

        public DnBRepositoryContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public DnBRepositoryContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public DnBRepositoryContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new PartyConfiguration());
            modelBuilder.Configurations.Add(new PartyCreditScoreConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new PartyConfiguration(schema));
            modelBuilder.Configurations.Add(new PartyCreditScoreConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class DnBRepositoryContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<DnBRepositoryContext>
    {
        public DnBRepositoryContext Create()
        {
            return new DnBRepositoryContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    //public class FakeDnBRepositoryContext : IDnBRepositoryContext
    //{
    //    public System.Data.Entity.DbSet<Party> Parties { get; set; }
    //    public System.Data.Entity.DbSet<PartyCreditScore> PartyCreditScores { get; set; }

    //    public FakeDnBRepositoryContext()
    //    {
    //        Parties = new FakeDbSet<Party>("PartyKey");
    //        PartyCreditScores = new FakeDbSet<PartyCreditScore>("PartyKey", "CreditScoreVendorCd", "CreditScoreTypeCd", "CreditScoreDate");
    //    }

    //    public int SaveChangesCount { get; private set; }
    //    public int SaveChanges()
    //    {
    //        ++SaveChangesCount;
    //        return 1;
    //    }

    //    public System.Threading.Tasks.Task<int> SaveChangesAsync()
    //    {
    //        ++SaveChangesCount;
    //        return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
    //    }

    //    public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
    //    {
    //        ++SaveChangesCount;
    //        return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
    //    }

    //    protected virtual void Dispose(bool disposing)
    //    {
    //    }

    //    public void Dispose()
    //    {
    //        Dispose(true);
    //    }

    //    private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
    //    public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
    //    private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
    //    public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
    //    private System.Data.Entity.Database _database;
    //    public System.Data.Entity.Database Database { get { return _database; } }
    //    //public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
    //    //{
    //    //    throw new System.NotImplementedException();
    //    //}
    //    //public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
    //    //{
    //    //    throw new System.NotImplementedException();
    //    //}
    //    //public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
    //    //{
    //    //    throw new System.NotImplementedException();
    //    //}
    //    //public System.Data.Entity.DbSet Set(System.Type entityType)
    //    //{
    //    //    throw new System.NotImplementedException();
    //    //}
    //    //public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
    //    //{
    //    //    throw new System.NotImplementedException();
    //    //}
    //    //public override string ToString()
    //    //{
    //    //    throw new System.NotImplementedException();
    //    //}

    //}

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    //[System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    //public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    //{
    //    private readonly System.Reflection.PropertyInfo[] _primaryKeys;
    //    private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
    //    private readonly IQueryable _query;

    //    public FakeDbSet()
    //    {
    //        _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
    //        _query = _data.AsQueryable();
    //    }

    //    public FakeDbSet(params string[] primaryKeys)
    //    {
    //        _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
    //        _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
    //        _query = _data.AsQueryable();
    //    }

    //    public override TEntity Find(params object[] keyValues)
    //    {
    //        if (_primaryKeys == null)
    //            throw new System.ArgumentException("No primary keys defined");
    //        if (keyValues.Length != _primaryKeys.Length)
    //            throw new System.ArgumentException("Incorrect number of keys passed to Find method");

    //        var keyQuery = this.AsQueryable();
    //        keyQuery = keyValues
    //            .Select((t, i) => i)
    //            .Aggregate(keyQuery,
    //                (current, x) =>
    //                    current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

    //        return keyQuery.SingleOrDefault();
    //    }

    //    public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
    //    {
    //        return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
    //    }

    //    public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
    //    {
    //        return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
    //    }

    //    public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
    //    {
    //        if (entities == null) throw new System.ArgumentNullException("entities");
    //        var items = entities.ToList();
    //        foreach (var entity in items)
    //        {
    //            _data.Add(entity);
    //        }
    //        return items;
    //    }

    //    public override TEntity Add(TEntity item)
    //    {
    //        if (item == null) throw new System.ArgumentNullException("item");
    //        _data.Add(item);
    //        return item;
    //    }

    //    public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
    //    {
    //        if (entities == null) throw new System.ArgumentNullException("entities");
    //        var items = entities.ToList();
    //        foreach (var entity in items)
    //        {
    //            _data.Remove(entity);
    //        }
    //        return items;
    //    }

    //    public override TEntity Remove(TEntity item)
    //    {
    //        if (item == null) throw new System.ArgumentNullException("item");
    //        _data.Remove(item);
    //        return item;
    //    }

    //    public override TEntity Attach(TEntity item)
    //    {
    //        if (item == null) throw new System.ArgumentNullException("item");
    //        _data.Add(item);
    //        return item;
    //    }

    //    public override TEntity Create()
    //    {
    //        return System.Activator.CreateInstance<TEntity>();
    //    }

    //    public override TDerivedEntity Create<TDerivedEntity>()
    //    {
    //        return System.Activator.CreateInstance<TDerivedEntity>();
    //    }

    //    public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
    //    {
    //        get { return _data; }
    //    }

    //    System.Type IQueryable.ElementType
    //    {
    //        get { return _query.ElementType; }
    //    }

    //    System.Linq.Expressions.Expression IQueryable.Expression
    //    {
    //        get { return _query.Expression; }
    //    }

    //    IQueryProvider IQueryable.Provider
    //    {
    //        get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
    //    }

    //    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    //    {
    //        return _data.GetEnumerator();
    //    }

    //    System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
    //    {
    //        return _data.GetEnumerator();
    //    }

    //    System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
    //    {
    //        return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
    //    }
    //}

    //[System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    //public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    //{
    //    private readonly IQueryProvider _inner;

    //    public FakeDbAsyncQueryProvider(IQueryProvider inner)
    //    {
    //        _inner = inner;
    //    }

    //    public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
    //    {
    //        return new FakeDbAsyncEnumerable<TEntity>(expression);
    //    }

    //    public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
    //    {
    //        return new FakeDbAsyncEnumerable<TElement>(expression);
    //    }

    //    public object Execute(System.Linq.Expressions.Expression expression)
    //    {
    //        return _inner.Execute(expression);
    //    }

    //    public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
    //    {
    //        return _inner.Execute<TResult>(expression);
    //    }

    //    public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
    //    {
    //        return System.Threading.Tasks.Task.FromResult(Execute(expression));
    //    }

    //    public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
    //    {
    //        return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
    //    }
    //}

    //[System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    //public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    //{
    //    public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
    //        : base(enumerable)
    //    { }

    //    public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
    //        : base(expression)
    //    { }

    //    public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
    //    {
    //        return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
    //    }

    //    System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
    //    {
    //        return GetAsyncEnumerator();
    //    }

    //    IQueryProvider IQueryable.Provider
    //    {
    //        get { return new FakeDbAsyncQueryProvider<T>(this); }
    //    }
    //}

    //[System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    //public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    //{
    //    private readonly System.Collections.Generic.IEnumerator<T> _inner;

    //    public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
    //    {
    //        _inner = inner;
    //    }

    //    public void Dispose()
    //    {
    //        _inner.Dispose();
    //    }

    //    public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
    //    {
    //        return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
    //    }

    //    public T Current
    //    {
    //        get { return _inner.Current; }
    //    }

    //    object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
    //    {
    //        get { return Current; }
    //    }
    //}

    #endregion

    #region POCO classes

    // PARTY
    //[System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Party
    {
        public long PartyKey { get; set; } // PARTY_KEY (Primary key)
        public string CountrySubdivisionCd { get; set; } // COUNTRY_SUBDIVISION_CD (length: 50)
        public string PartyName { get; set; } // PARTY_NAME (length: 255)
        public string PartyAddressLine1Txt { get; set; } // PARTY_ADDRESS_LINE1_TXT (length: 500)
        public string PartyAddressLine2Txt { get; set; } // PARTY_ADDRESS_LINE2_TXT (length: 500)
        public string PartyCityNm { get; set; } // PARTY_CITY_NM (length: 255)
        public string PartyPostalCode { get; set; } // PARTY_POSTAL_CODE (length: 500)
        public string VendorPartyId { get; set; } // VENDOR_PARTY_ID (length: 50)
        public string TelephonenumberTxt { get; set; } // TELEPHONENUMBER_TXT (length: 500)
        public System.DateTime? BusinessStartDt { get; set; } // BUSINESS_START_DT
        public string BusinessSectorTxt { get; set; } // BUSINESS_SECTOR_TXT (length: 500)
        public long? TotalEmployeeNo { get; set; } // TOTAL_EMPLOYEE_NO
        public string ParentNm { get; set; } // PARENT_NM (length: 255)
        public string DomesticUltimateParentNm { get; set; } // DOMESTIC_ULTIMATE_PARENT_NM (length: 255)
        public string GlobalParentEntityNm { get; set; } // GLOBAL_PARENT_ENTITY_NM (length: 255)
        public decimal? AvgCreditLimitAmt { get; set; } // AVG_CREDIT_LIMIT_AMT
        public string PrinicpalNm { get; set; } // PRINICPAL_NM (length: 255)
        public string PrincipalDesignationTxt { get; set; } // PRINCIPAL_DESIGNATION_TXT (length: 500)
        public decimal? EquityAmt { get; set; } // EQUITY_AMT
        public decimal? LiabilityAmt { get; set; } // LIABILITY_AMT
        public System.DateTime? CreateTs { get; set; } // CREATE_TS
        public System.DateTime? LastUpdateTs { get; set; } // LAST_UPDATE_TS

        // Reverse navigation

        /// <summary>
        /// Child PartyCreditScores where [PARTY_CREDIT_SCORE].[PARTY_KEY] point to this entity (FK_PARTY_CR_REFERENCE_PARTY)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PartyCreditScore> PartyCreditScores { get; set; } // PARTY_CREDIT_SCORE.FK_PARTY_CR_REFERENCE_PARTY

        public Party()
        {
            PartyCreditScores = new System.Collections.Generic.List<PartyCreditScore>();
        }
    }

    // PARTY_CREDIT_SCORE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PartyCreditScore
    {
        public long PartyKey { get; set; } // PARTY_KEY (Primary key)
        public string CreditScoreVendorCd { get; set; } // CREDIT_SCORE_VENDOR_CD (Primary key) (length: 50)
        public string CreditScoreTypeCd { get; set; } // CREDIT_SCORE_TYPE_CD (Primary key) (length: 50)
        public System.DateTime CreditScoreDate { get; set; } // CREDIT_SCORE_DATE (Primary key)
        public string CreditScoreTxt { get; set; } // CREDIT_SCORE_TXT (length: 500)
        public string VendorPartyId { get; set; } // VENDOR_PARTY_ID (length: 50)
        public System.DateTime? CreateTs { get; set; } // CREATE_TS

        // Foreign keys

        /// <summary>
        /// Parent Party pointed by [PARTY_CREDIT_SCORE].([PartyKey]) (FK_PARTY_CR_REFERENCE_PARTY)
        /// </summary>
        public virtual Party Party { get; set; } // FK_PARTY_CR_REFERENCE_PARTY
    }

    #endregion

    #region POCO Configuration

    // PARTY
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PartyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Party>
    {
        public PartyConfiguration()
            : this("dbo")
        {
        }

        public PartyConfiguration(string schema)
        {
            ToTable("PARTY", schema);
            HasKey(x => x.PartyKey);

            Property(x => x.PartyKey).HasColumnName(@"PARTY_KEY").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CountrySubdivisionCd).HasColumnName(@"COUNTRY_SUBDIVISION_CD").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.PartyName).HasColumnName(@"PARTY_NAME").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PartyAddressLine1Txt).HasColumnName(@"PARTY_ADDRESS_LINE1_TXT").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.PartyAddressLine2Txt).HasColumnName(@"PARTY_ADDRESS_LINE2_TXT").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.PartyCityNm).HasColumnName(@"PARTY_CITY_NM").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PartyPostalCode).HasColumnName(@"PARTY_POSTAL_CODE").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.VendorPartyId).HasColumnName(@"VENDOR_PARTY_ID").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.TelephonenumberTxt).HasColumnName(@"TELEPHONENUMBER_TXT").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.BusinessStartDt).HasColumnName(@"BUSINESS_START_DT").HasColumnType("datetime2").IsOptional();
            Property(x => x.BusinessSectorTxt).HasColumnName(@"BUSINESS_SECTOR_TXT").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.TotalEmployeeNo).HasColumnName(@"TOTAL_EMPLOYEE_NO").HasColumnType("bigint").IsOptional();
            Property(x => x.ParentNm).HasColumnName(@"PARENT_NM").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.DomesticUltimateParentNm).HasColumnName(@"DOMESTIC_ULTIMATE_PARENT_NM").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.GlobalParentEntityNm).HasColumnName(@"GLOBAL_PARENT_ENTITY_NM").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.AvgCreditLimitAmt).HasColumnName(@"AVG_CREDIT_LIMIT_AMT").HasColumnType("decimal").IsOptional().HasPrecision(12,2);
            Property(x => x.PrinicpalNm).HasColumnName(@"PRINICPAL_NM").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PrincipalDesignationTxt).HasColumnName(@"PRINCIPAL_DESIGNATION_TXT").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.EquityAmt).HasColumnName(@"EQUITY_AMT").HasColumnType("decimal").IsOptional().HasPrecision(12,2);
            Property(x => x.LiabilityAmt).HasColumnName(@"LIABILITY_AMT").HasColumnType("decimal").IsOptional().HasPrecision(12,2);
            Property(x => x.CreateTs).HasColumnName(@"CREATE_TS").HasColumnType("datetime2").IsOptional();
            Property(x => x.LastUpdateTs).HasColumnName(@"LAST_UPDATE_TS").HasColumnType("datetime2").IsOptional();
        }
    }

    // PARTY_CREDIT_SCORE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PartyCreditScoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PartyCreditScore>
    {
        public PartyCreditScoreConfiguration()
            : this("dbo")
        {
        }

        public PartyCreditScoreConfiguration(string schema)
        {
            ToTable("PARTY_CREDIT_SCORE", schema);
            HasKey(x => new { x.PartyKey, x.CreditScoreVendorCd, x.CreditScoreTypeCd, x.CreditScoreDate });

            Property(x => x.PartyKey).HasColumnName(@"PARTY_KEY").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreditScoreVendorCd).HasColumnName(@"CREDIT_SCORE_VENDOR_CD").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreditScoreTypeCd).HasColumnName(@"CREDIT_SCORE_TYPE_CD").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreditScoreDate).HasColumnName(@"CREDIT_SCORE_DATE").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreditScoreTxt).HasColumnName(@"CREDIT_SCORE_TXT").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.VendorPartyId).HasColumnName(@"VENDOR_PARTY_ID").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreateTs).HasColumnName(@"CREATE_TS").HasColumnType("datetime2").IsOptional();

            // Foreign keys
            HasRequired(a => a.Party).WithMany(b => b.PartyCreditScores).HasForeignKey(c => c.PartyKey).WillCascadeOnDelete(false); // FK_PARTY_CR_REFERENCE_PARTY
        }
    }

    #endregion

}
// </auto-generated>

